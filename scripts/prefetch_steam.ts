import { profile } from '../data/steam_raw';
import { existsSync, writeFileSync } from 'fs';
import { downloadImage, globalBrowser, hash } from './lib';
import { Game, nonSteamGames } from '../data/non_steam';

/**=====================*\
|     Game Resources     |
\=======================*/

const heroImgs: { appId: number | string; path: string; hash: string }[] = [];
const iconImgs: { appId: number | string; path: string; hash: string }[] = [];

let games: Game[] = [...profile.games, ...nonSteamGames]

const gamePromises = await Promise.all(
	games.map((game) => {
		if (game.playtime > 0) {
			const hero_url = `https://cdn.cloudflare.steamstatic.com/steam/apps/${game.appid}/header.jpg`;
			const hero_path = `src/assets/games/${game.appid}.jpg`;
			heroImgs.push({ appId: game.appid, path: hero_path, hash: hash() });
			if (!existsSync(hero_path)) {
				return downloadImage(hero_url, hero_path);
			}

			const icon_url = `https://media.steampowered.com/steamcommunity/public/images/apps/${game.appid}/${game.icon_url}.jpg`;
			const icon_path = `src/assets/icons/${game.appid}.jpg`;
			iconImgs.push({ appId: game.appid, path: icon_path, hash: hash() });
			if (!existsSync(icon_path)) {
				return downloadImage(icon_url, icon_path);
			}
		}
	})
);

/**=====================*\
|   Profile Resources    |
\=======================*/

const savedAvatars: Record<string, number> = {};
const profilePics: { profile: string; path: string; hash: string }[] = [];

// Download user profile picture
const url = `https://avatars.steamstatic.com/${profile.avatar}`;
const path = `src/assets/profile_pictures/${profile.avatar}`;
if (!savedAvatars[profile.avatar]) {
	profilePics.push({ profile: profile.avatar, path, hash: hash() });
}
savedAvatars[profile.avatar] = 1;
if (!existsSync(path)) {
	await downloadImage(url, path);
}

// Download friend profile pictures
const profilePicPromises = await Promise.all(
	profile.friends.map((friend) => {
		const url = `https://avatars.steamstatic.com/${friend.avatar}`;
		const path = `src/assets/profile_pictures/${friend.avatar}`;
		if (!savedAvatars[friend.avatar]) {
			profilePics.push({ profile: friend.avatar, path, hash: hash() });
		}
		savedAvatars[friend.avatar] = 1;
		if (!existsSync(path)) {
			return downloadImage(url, path);
		}
	})
);

/**=====================*\
|       Data Export      |
\=======================*/

console.log(
	`Fetched ${gamePromises.filter((path) => path != undefined).length} new game resources`
);
console.log(
	`Fetched ${profilePicPromises.filter((path) => path != undefined).length} new profile pictures`
);

// ===== Hero Banner Imports =====
const heroImports = `${heroImgs
	.map(
		(game) => `import ${game.hash} from '../assets/games/${game.appId}.jpg?enhanced&format=webp'`
	)
	.join('\n')}

const gameHeroDict: Record<string, Picture> = {
${heroImgs.map((game) => typeof(game.appId) === "number" ? `\t[${game.appId}]: ${game.hash}` : `\t"${game.appId}": ${game.hash}`).join(',\n')}
};

const getGameHero = (appId: number | string) => {
	if (gameHeroDict[appId]) {
		return gameHeroDict[appId]
	}
	return \`https://cdn.cloudflare.steamstatic.com/steam/apps/\${appId}/header.jpg\`
}
export { getGameHero }`;

// ===== Game Icon Imports =====
const iconImports = `${iconImgs
	.map(
		(game) => `import ${game.hash} from '../assets/icons/${game.appId}.jpg?enhanced&format=webp'`
	)
	.join('\n')}

const gameIconDict: Record<string, Picture> = {
${iconImgs.map((game) => typeof(game.appId) === "number" ? `\t[${game.appId}]: ${game.hash}` : `\t"${game.appId}": ${game.hash}`).join(',\n')}
};

const getGameIcon = (appId: number | string, icon_url: string | undefined) => {
	if (gameIconDict[appId]) {
		return gameIconDict[appId]
	}
	return \`https://media.steampowered.com/steamcommunity/public/images/apps/\${appId}/\${icon_url}.jpg\`
}
export { getGameIcon }`;

// ===== Profile Picture Imports =====
const profilePicImports = `${profilePics
	.map(
		(profile) =>
			`import ${profile.hash} from '../assets/profile_pictures/${profile.profile}?enhanced&format=webp&w=64;128;200'`
	)
	.join('\n')}

const pfpDict: Record<string, Picture> = {
${profilePics.map((profile) => `\t"${profile.profile}": ${profile.hash}`).join(',\n')}
};

const getProfilePicture = (profilePic: string) => {
    if (pfpDict[profilePic]) {
		return pfpDict[profilePic]
	}
    return \`https://avatars.steamstatic.com/\${profilePic}\`
}
export { getProfilePicture }`;

const cache = `/**
* NOTE: This file is auto-generated by scripts/prefetch_steam.ts
* DO NOT modify manually
*/
import type { Picture } from 'vite-imagetools';
${heroImports}
${iconImports}
${profilePicImports}
`;

writeFileSync('src/lib/cache.ts', cache);

if (globalBrowser) {
    await globalBrowser.close();
	exit(0);
}
